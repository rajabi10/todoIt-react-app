[{"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/index.js":"1","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/App.js":"2","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/GlobalStyles.js":"3","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Focus.js":"4","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/Homepage.js":"5","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/DayView.js":"6","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Calendar/CalendarView.js":"7","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Week/WeekView.js":"8","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Constants.js":"9","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/NoEventToday.js":"10","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/DateSection.js":"11","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/NewsFeed.js":"12","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/SingleEvent.js":"13","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/Weather.js":"14","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Calendar/MyCalendar.js":"15","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventDialog.js":"16","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventDialog.js":"17","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/DeleteEventDialog.js":"18","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventForm.js":"19","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventForm.js":"20","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/LoadingIcon.js":"21","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventTime.js":"22","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventCalendar.js":"23","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/SmallLoadingIcon.js":"24","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventTime.js":"25"},{"size":197,"mtime":1620181540000,"results":"26","hashOfConfig":"27"},{"size":880,"mtime":1620181540000,"results":"28","hashOfConfig":"27"},{"size":1019,"mtime":1620181540000,"results":"29","hashOfConfig":"27"},{"size":1373,"mtime":1620181540000,"results":"30","hashOfConfig":"27"},{"size":5200,"mtime":1631432717874,"results":"31","hashOfConfig":"27"},{"size":3337,"mtime":1620181540000,"results":"32","hashOfConfig":"27"},{"size":5492,"mtime":1620181540000,"results":"33","hashOfConfig":"27"},{"size":10669,"mtime":1620181540000,"results":"34","hashOfConfig":"27"},{"size":1910,"mtime":1631431841034,"results":"35","hashOfConfig":"27"},{"size":641,"mtime":1620181540000,"results":"36","hashOfConfig":"27"},{"size":2714,"mtime":1620181540000,"results":"37","hashOfConfig":"27"},{"size":2994,"mtime":1631432835265,"results":"38","hashOfConfig":"27"},{"size":3331,"mtime":1620181540000,"results":"39","hashOfConfig":"27"},{"size":2513,"mtime":1631434340714,"results":"40","hashOfConfig":"27"},{"size":2298,"mtime":1620181540000,"results":"41","hashOfConfig":"27"},{"size":1276,"mtime":1620181540000,"results":"42","hashOfConfig":"27"},{"size":962,"mtime":1620181540000,"results":"43","hashOfConfig":"27"},{"size":2734,"mtime":1620181540000,"results":"44","hashOfConfig":"27"},{"size":10817,"mtime":1620181540000,"results":"45","hashOfConfig":"27"},{"size":11058,"mtime":1631431380043,"results":"46","hashOfConfig":"27"},{"size":658,"mtime":1620181540000,"results":"47","hashOfConfig":"27"},{"size":3896,"mtime":1620181540000,"results":"48","hashOfConfig":"27"},{"size":994,"mtime":1620181540000,"results":"49","hashOfConfig":"27"},{"size":668,"mtime":1620181540000,"results":"50","hashOfConfig":"27"},{"size":4334,"mtime":1620181540000,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1k3iryv",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/index.js",[],["110","111"],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/App.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/GlobalStyles.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Focus.js",["112","113","114","115","116","117","118","119"],"import React, { useState, useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport NewEventDialog from \"./Components/NewEventDialog\";\n\nconst Focus = () => {\n  const [task_time, setTaskTime] = useState(25);\n  const [shortBreak, setShortBreak] = useState(5);\n  const [longBreak, setLongBreak] = useState(15);\n  return (\n    <Wrapper>\n      <div>Focus</div>\n      <div>\n        {\" \"}\n        <CircleContainer>\n          <Circle r=\"18\" cx=\"20\" cy=\"20\"></Circle>\n        </CircleContainer>\n      </div>\n\n      <NewEventDialog />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n  background-color: #333;\n`;\nconst countdown = keyframes`\nfrom { stroke-dashoffset: 0px}\nto{stroke-dashoffset: 113px}\n`;\n\nconst CircleContainer = styled.svg`\n  width: 40px;\n  height: 40px;\n  transform: rotateY(-180deg) rotateZ(-90deg);\n\n  stroke-dasharray: 113px;\n  stroke-dashoffset: 0px;\n  stroke-linecap: round;\n  stroke-width: 2px;\n  stroke: white;\n  fill: none;\n  animation: countdown 10s linear infinite forwards;\n`;\n\nconst Circle = styled.circle`\n  stroke-dasharray: 113px;\n  stroke-dashoffset: 0px;\n  stroke-linecap: round;\n  stroke-width: 2px;\n  stroke: white;\n  fill: none;\n  animation: ${countdown} 10s linear infinite forwards;\n`;\n\nexport default Focus;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/Homepage.js",["120","121"],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/DayView.js",["122","123"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport styled from \"styled-components\";\nimport { COLORS, dayColors } from \"../Constants\";\nimport { GrLocation } from \"react-icons/gr\";\nimport { AiOutlineHome } from \"react-icons/ai\";\nimport { BiArrowBack } from \"react-icons/bi\";\n\nimport NoEventToday from \"./NoEventToday\";\nimport NewEventDialog from \"../Components/NewEventDialog\";\n\nimport DateSection from \"./DateSection\";\nimport SingleEvent from \"./SingleEvent\";\n\nconst DayView = () => {\n  const [dayEvents, setDayEvents] = useState([]);\n  const [status, setStatus] = useState(\"loading\");\n  const history = useHistory();\n  const params = useParams();\n  const today = new Date(\n    params.date.slice(0, 4),\n    params.date.slice(5, 7) - 1,\n    params.date.slice(8, 10)\n  );\n\n  useEffect(() => {\n    setStatus(\"loading\");\n    fetch(`/events/date/${params.date}`)\n      .then((res) => res.json())\n      .then((res) => {\n        setDayEvents(res.data);\n        setStatus(\"idle\");\n      })\n      .catch((error) => console.log(\"error!\", error));\n  }, [params]);\n\n  const getDayEventsAfterDeleteAdd = async () => {\n    setStatus(\"loading\");\n    await fetch(`/events/date/${params.date}`)\n      .then((res) => res.json())\n      .then((res) => {\n        setDayEvents(res.data);\n        setStatus(\"idle\");\n      })\n      .catch((error) => console.log(\"error!\", error));\n  };\n\n  return (\n    <Wrapper>\n      <NewEventDialog refreshEvents={getDayEventsAfterDeleteAdd} />\n      <Tabs>\n        <NavIcon>\n          <AiOutlineHome onClick={() => history.push(\"/\")} size={30} />\n        </NavIcon>\n        <NavIcon>\n          <BiArrowBack onClick={() => history.goBack()} size={30} />\n        </NavIcon>\n        <TabItem\n          onClick={() => history.push(\"/calendar-month\")}\n          style={{ backgroundColor: \"#b5cdfd\" }}\n        >\n          month\n        </TabItem>\n        <TabItem\n          style={{ backgroundColor: \"#b5cdfd\" }}\n          onClick={() => history.push(`/week/${params.date}`)}\n        >\n          week\n        </TabItem>\n        <TabItem>Day</TabItem>\n      </Tabs>\n      <DateSection today={today} />\n\n      {status === \"loading\" ? null : (\n        <ContentSection>\n          {dayEvents.length === 0 ? (\n            <NoEventToday />\n          ) : (\n            <>\n              <SingleEvent\n                dayEvents={dayEvents}\n                refreshEvents={getDayEventsAfterDeleteAdd}\n              />\n            </>\n          )}\n        </ContentSection>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  min-height: 100vh;\n  background: ${COLORS.background};\n`;\n\nconst Tabs = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 2px;\n  margin-right: 3px;\n`;\nconst NavIcon = styled.div`\n  padding: 0 5px;\n  color: rgb(222, 87, 102);\n  border: 1px solid rgb(222, 87, 102);\n  border-radius: 4px;\n  margin: 0 3px;\n`;\nconst TabItem = styled.div`\n  flex-grow: 1;\n  text-align: center;\n  background-color: rgb(150, 184, 252);\n  border: 1px solid #cedefd;\n  color: white;\n  text-transform: uppercase;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  border-bottom: none;\n  padding: 6px 0;\n  font-size: 1.2rem;\n`;\n\nconst ContentSection = styled.div`\n  position: absolute;\n  top: 200px;\n  width: 100vw;\n`;\nexport default DayView;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Calendar/CalendarView.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Week/WeekView.js",["124"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../Constants\";\nimport { useHistory } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport { AiOutlineHome } from \"react-icons/ai\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport NewEventDialog from \"../Components/NewEventDialog\";\n\nconst WeekView = () => {\n  let history = useHistory();\n  const [status, setStatus] = useState(\"idle\");\n  const [today, setToday] = useState(new Date());\n  const [weekEvents, setWeekEvents] = useState([]);\n\n  //Determine the date for the current week's Monday\n  //let current_month = format(today, \"LLLL\");\n  let toStartOfWeek = today.getDay() - 1;\n  let startOfWeekDate = new Date();\n  startOfWeekDate.setDate(today.getDate() - toStartOfWeek);\n\n  // Create an array with all the dates of the current week\n  let weekArray = [];\n  for (let i = 0; i < 7; i++) {\n    let date = new Date();\n    date.setDate(startOfWeekDate.getDate() + i);\n    weekArray.push(format(date, \"yyyy-MM-dd\"));\n  }\n  // Create a state with the dates array\n  const [weekRange, setWeekRange] = useState(weekArray);\n\n  // Fetch this week's events\n  useEffect(() => {\n    if (weekRange.length > 0) {\n      setStatus(\"idle\");\n      fetch(\"/events/week\", {\n        method: \"POST\",\n        body: JSON.stringify({ weekRange }),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((res) => res.json())\n        .then((res) => {\n          setWeekEvents(res.data.results);\n          setStatus(\"received\");\n        })\n        .catch((error) => {\n          console.log(\"error!\", error);\n          setStatus(\"error\");\n        });\n    }\n  }, [weekRange]);\n\n  useEffect(() => {\n    //Determine the date for the current week's Monday\n    //let current_month = format(today, \"LLLL\");\n    let toStartOfWeek = today.getDay() - 1;\n    let startOfWeekDate = new Date();\n    startOfWeekDate.setDate(today.getDate() - toStartOfWeek);\n\n    // Create an array with all the dates of the current week\n    let weekArray = [];\n    for (let i = 0; i < 7; i++) {\n      let date = new Date();\n      date.setDate(startOfWeekDate.getDate() + i);\n      weekArray.push(format(date, \"yyyy-MM-dd\"));\n    }\n\n    setWeekRange(weekArray);\n  }, [today]);\n\n  // Refresh after adding a new event\n  const refreshAfterNewEvent = async () => {\n    setStatus(\"idle\");\n    await fetch(\"/events/week\", {\n      method: \"POST\",\n      body: JSON.stringify({ weekRange }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setWeekEvents(res.data.results);\n        setStatus(\"received\");\n      })\n      .catch((error) => {\n        console.log(\"error!\", error);\n        setStatus(\"error\");\n      });\n  };\n\n  const nextWeek = () => {\n    let nextDay = new Date();\n    nextDay.setDate(today.getDate() + 7);\n    setToday(nextDay);\n  };\n\n  const previousWeek = () => {\n    let prevDay = new Date();\n    prevDay.setDate(today.getDate() - 7);\n    setToday(prevDay);\n  };\n\n  return (\n    <Wrapper>\n      <NewEventDialog refreshEvents={refreshAfterNewEvent} />\n      <Tabs>\n        <NavIcon>\n          <AiOutlineHome onClick={() => history.push(\"/\")} size={30} />\n        </NavIcon>\n        <NavIcon>\n          <BiArrowBack onClick={() => history.goBack()} size={30} />\n        </NavIcon>\n        <TabItem\n          onClick={() => history.push(\"/calendar-month\")}\n          style={{ backgroundColor: \"#b5cdfd\" }}\n        >\n          month\n        </TabItem>\n        <TabItem onClick={() => history.push(\"/week/a\")}>week</TabItem>\n        <TabItem\n          style={{ backgroundColor: \"#b5cdfd\" }}\n          onClick={() => history.push(`/date/${format(new Date(), \"y-MM-dd\")}`)}\n        >\n          Day\n        </TabItem>\n      </Tabs>\n      <WeekBar>\n        <div className=\"month\">{format(today, \"LLLL yyyy\")}</div>\n        <div className=\"numbers\">\n          <WeekButton onClick={(ev) => previousWeek()}> {\"‹\"} </WeekButton>\n          {weekRange.map((weekDay) => {\n            let date = new Date(\n              weekDay.slice(0, 4),\n              weekDay.slice(5, 7) - 1,\n              weekDay.slice(8, 10)\n            );\n            return <div>{date.getDate()}</div>;\n          })}\n          <WeekButton onClick={(ev) => nextWeek()}> {\"›\"} </WeekButton>\n        </div>\n      </WeekBar>\n      <WeekContainer>\n        {weekEvents.map((weekDay) => {\n          let date = new Date(\n            weekDay.date.slice(0, 4),\n            weekDay.date.slice(5, 7) - 1,\n            weekDay.date.slice(8, 10)\n          );\n\n          if (date.getDay() < 6 && date.getDay() > 0) {\n            return (\n              <DateContainer\n                onClick={(ev) => {\n                  history.push(`/date/${weekDay.date}`);\n                }}\n              >\n                <div className=\"week-date\">{format(date, \"EEEE, MMM. d\")}</div>\n                <Tasks>\n                  {weekDay.allDayEvents.map((task) => {\n                    return (\n                      <SingleTask>\n                        <AllDayEvent>{task.title}</AllDayEvent>\n                      </SingleTask>\n                    );\n                  })}\n                  {weekDay.events.map((task) => {\n                    return (\n                      <SingleTask>\n                        <TaskTime>\n                          {task.start.time.hours}:{task.start.time.minutes}{\" \"}\n                          {task.start.time.ap}\n                        </TaskTime>\n                        <TaskTitle>{task.title}</TaskTitle>\n                      </SingleTask>\n                    );\n                  })}\n                </Tasks>\n              </DateContainer>\n            );\n          } else if (date.getDay() === 6) {\n            return (\n              <DateContainer>\n                <WEDateContainer\n                  onClick={(ev) => {\n                    history.push(`/date/${weekDay.date}`);\n                  }}\n                >\n                  <div className=\"week-date\">\n                    {format(date, \"EEEE, MMM. d\")}\n                  </div>\n                  <Tasks>\n                    {weekDay.allDayEvents.map((task) => {\n                      return (\n                        <SingleTask>\n                          <AllDayEvent>{task.title}</AllDayEvent>\n                        </SingleTask>\n                      );\n                    })}\n                    {weekDay.events.map((task) => {\n                      return (\n                        <SingleTask>\n                          <TaskTime>\n                            {task.start.time.hours}:{task.start.time.minutes}{\" \"}\n                            {task.start.time.ap}\n                          </TaskTime>\n                          <TaskTitle>{task.title}</TaskTitle>\n                        </SingleTask>\n                      );\n                    })}\n                  </Tasks>\n                </WEDateContainer>\n                <WEDateContainer\n                  onClick={(ev) => {\n                    history.push(`/date/${weekEvents[6].date}`);\n                  }}\n                >\n                  <div className=\"week-date\">\n                    {format(date.setDate(date.getDate() + 1), \"EEEE, MMM. d\")}\n                  </div>\n                  <Tasks>\n                    {weekEvents[6].allDayEvents.map((task) => {\n                      return (\n                        <SingleTask>\n                          <AllDayEvent>{task.title}</AllDayEvent>\n                        </SingleTask>\n                      );\n                    })}\n                    {weekEvents[6].events.map((task) => {\n                      return (\n                        <SingleTask>\n                          <TaskTime>\n                            {task.start.time.hours}:{task.start.time.minutes}{\" \"}\n                            {task.start.time.ap}\n                          </TaskTime>\n                          <TaskTitle>{task.title}</TaskTitle>\n                        </SingleTask>\n                      );\n                    })}\n                  </Tasks>\n                </WEDateContainer>\n              </DateContainer>\n            );\n          } else {\n            return <></>;\n          }\n        })}\n      </WeekContainer>\n    </Wrapper>\n  );\n};\nconst Wrapper = styled.div`\n  height: 100vh;\n  background-color: ${COLORS.background};\n`;\nconst Tabs = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 2px;\n  margin-right: 3px;\n`;\nconst NavIcon = styled.div`\n  padding: 0 5px;\n  color: rgb(222, 87, 102);\n  border: 1px solid rgb(222, 87, 102);\n  border-radius: 4px;\n  margin: 0 3px;\n`;\nconst TabItem = styled.div`\n  flex-grow: 1;\n  text-align: center;\n  background-color: rgb(150, 184, 252);\n  border: 1px solid #cedefd;\n  color: white;\n  text-transform: uppercase;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  border-bottom: none;\n  padding: 6px 0;\n  font-size: 1.2rem;\n`;\n\nconst WeekBar = styled.div`\n  text-align: center;\n  background-color: white;\n  padding-bottom: 8px;\n  .month {\n    padding-top: 8px;\n    font-size: 1.4rem;\n    text-transform: lowercase;\n  }\n  .numbers {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 10px 0px;\n    font-size: 1.3rem;\n  }\n`;\nconst WeekButton = styled.button`\n  margin: 0 10px;\n  border: none;\n  background-color: white;\n  font-size: 1.4rem;\n  line-height: 1rem;\n  &:active {\n    outline: none;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\nconst WeekContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 80%;\n  .week-date {\n    width: 100%;\n    text-align: center;\n    padding: 5px 0;\n    font-size: 1.1rem;\n    font-weight: 500;\n    text-decoration: underline 3px solid rgb(187, 222, 215);\n  }\n`;\n\nconst DateContainer = styled.div`\n  border: 1px solid #dae2f1;\n  width: 49%;\n  height: 33%;\n  overflow: hidden;\n`;\nconst WEDateContainer = styled.div`\n  border-bottom: 1px solid #cedefd;\n  height: 50%;\n  &:last-of-type {\n    border: none;\n  }\n`;\n\nconst Tasks = styled.div`\n  padding: 5px 10px;\n`;\n\nconst SingleTask = styled.div`\n  margin: 2px 0;\n`;\nconst AllDayEvent = styled.div`\n  background-color: rgb(254, 182, 185, 0.7);\n  padding: 2px 5px;\n  margin: 3px 0px;\n`;\nconst TaskTime = styled.div`\n  display: inline;\n  background-color: rgb(97, 191, 191);\n  margin-right: 5px;\n  font-size: 0.9rem;\n  padding: 0px 2px;\n  text-transform: lowercase;\n  color: white;\n  font-weight: 400;\n`;\nconst TaskTitle = styled.div`\n  display: inline;\n  font-size: 0.95rem;\n`;\n\nexport default WeekView;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Constants.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/NoEventToday.js",["125"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport picture from \"./img.png\";\n\nconst NoEventToday = () => {\n  let history = useHistory();\n\n  return (\n    <Wrapper>\n      <p>You have nothing planned for the day!</p>\n      <p className=\"TapMsg\">Tap \" + \" to add a task.</p>\n      <Img src={picture} />\n    </Wrapper>\n  );\n};\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: auto;\n  padding-top: 30px;\n  font-size: 1.2rem;\n  .TapMsg {\n    padding-top: 15px;\n    font-size: 1.3rem;\n  }\n`;\nconst Img = styled.img`\n  max-width: 100vw;\n`;\nexport default NoEventToday;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/DateSection.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/NewsFeed.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Day/SingleEvent.js",["126","127","128","129","130"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport styled from \"styled-components\";\nimport { COLORS, dayColors } from \"../Constants\";\nimport { GrLocation } from \"react-icons/gr\";\n\nimport DeleteEventDialog from \"../Components/DeleteEventDialog\";\nimport EditEventDialog from \"../Components/EditEventDialog\";\n\nconst SingleEvent = ({ dayEvents, refreshEvents }) => {\n  let colorIndex = 0;\n  return (\n    <>\n      {dayEvents.map((dayEvent) => (\n        <SingleEventBox>\n          <TimeBox>\n            {dayEvent.start.time.allday ? (\n              <div>All day</div>\n            ) : (\n              <>\n                <div style={{ fontWeight: \"500\" }}>\n                  {dayEvent.start.time.hours}:{dayEvent.start.time.minutes}{\" \"}\n                  {dayEvent.start.time.ap}\n                </div>\n                <div style={{ fontWeight: \"300\" }}>\n                  {dayEvent.end.time.hours}:{dayEvent.end.time.minutes}{\" \"}\n                  {dayEvent.end.time.ap}\n                </div>\n              </>\n            )}\n          </TimeBox>\n          <div className=\"RightBox\">\n            <EventContentBox\n              style={{\n                borderLeft: `5px solid ${dayColors[colorIndex++]}`,\n              }}\n            >\n              <div className=\"nameNdesc\">\n                <EventTitle>{dayEvent.title}</EventTitle>\n                {dayEvent.description ? (\n                  <EventDescr>{dayEvent.description}</EventDescr>\n                ) : null}\n              </div>\n              {dayEvent.location ? (\n                <EventLocation>\n                  <GrLocation size=\"13\" /> {dayEvent.location}\n                </EventLocation>\n              ) : null}\n            </EventContentBox>\n\n            <EventButtonBox>\n              <EventButtons>\n                <EditEventDialog\n                  currentEvent={dayEvent}\n                  refreshEvents={refreshEvents}\n                />\n              </EventButtons>\n              <EventButtons>\n                <DeleteEventDialog\n                  eventId={dayEvent._id}\n                  refreshEvents={refreshEvents}\n                />\n              </EventButtons>\n            </EventButtonBox>\n          </div>\n        </SingleEventBox>\n      ))}\n    </>\n  );\n};\n\nconst SingleEventBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  border-bottom: 2px solid #dae2f1;\n  font-weight: 300;\n  padding: 15px 0;\n  .nameNdesc {\n    padding-bottom: 6px;\n  }\n  .RightBox {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`;\nconst TimeBox = styled.div`\n  padding-left: 10px;\n  min-width: 75px;\n  font-size: 0.9rem;\n`;\nconst EventContentBox = styled.div`\n  padding-left: 15px;\n  padding-right: 5px;\n`;\nconst EventTitle = styled.div`\n  font-size: 1.2rem;\n  font-weight: 400;\n`;\nconst EventDescr = styled.div`\n  font-size: 1rem;\n  padding-top: 4px;\n`;\nconst EventLocation = styled.div`\n  font-size: 0.95rem;\n`;\nconst EventButtonBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-right: 5px;\n`;\nconst EventButtons = styled.div`\n  background: transparent;\n  border: none;\n  font-size: 1.3rem;\n  opacity: 30%;\n  display: block;\n  padding: 3px 5px;\n`;\nexport default SingleEvent;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Homepage/Weather.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Calendar/MyCalendar.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventDialog.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventDialog.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/DeleteEventDialog.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventForm.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventForm.js",["131"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../Constants\";\nimport { format } from \"date-fns\";\nimport { FiCalendar } from \"react-icons/fi\";\nimport { BsArrowRight } from \"react-icons/bs\";\nimport { GrLocation } from \"react-icons/gr\";\nimport { RiNotification2Line } from \"react-icons/ri\";\nimport { GrClose } from \"react-icons/gr\";\nimport { FcCheckmark } from \"react-icons/fc\";\n\nimport SmallLoadingIcon from \"./SmallLoadingIcon\";\nimport NewEventCalendar from \"./NewEventCalendar\";\nimport EditEventTime from \"./EditEventTime\";\n\nconst EditEventForm = ({ closeDialog, refreshEvents, currentEvent }) => {\n  const [form, setForm] = useState(currentEvent);\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n  const [status, setStatus] = useState(\"idle\");\n\n  useEffect(() => {\n    if (form.title != null && form.start.date != null) {\n      if (form.start.time.allday === true) {\n        setButtonDisabled(false);\n      } else {\n        if (\n          form.start.time.hours != null &&\n          form.start.time.minutes != null &&\n          form.start.time.ap != null &&\n          form.end.time.hours != null &&\n          form.end.time.minutes != null &&\n          form.end.time.ap != null\n        ) {\n          setButtonDisabled(false);\n        } else {\n          setButtonDisabled(true);\n        }\n      }\n    } else {\n      setButtonDisabled(true);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    let startDate = new Date(currentEvent.start.date);\n    let formatted = format(startDate, \"EEE. MMM. d, y\");\n    setDisplayStartDate(formatted);\n    let endDate = new Date(currentEvent.end.date);\n    let formatted2 = format(endDate, \"EEE. MMM. d, y\");\n    setDisplayEndDate(formatted2);\n  }, []);\n\n  const handleTitle = (value) => setForm({ ...form, title: value });\n  const handleDescription = (value) => setForm({ ...form, description: value });\n  const handleLocation = (value) => setForm({ ...form, location: value });\n\n  const UpdateEvent = (event) => {\n    event.preventDefault();\n    setStatus(\"loading\");\n\n    fetch(\"/editEvent\", {\n      method: \"PUT\",\n      body: JSON.stringify({ form }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        refreshEvents();\n        setStatus(\"updated\");\n        setButtonDisabled(true);\n      })\n      .catch((error) => {\n        console.log(\"error!\", error);\n        setStatus(\"error\");\n        setButtonDisabled(true);\n      });\n  };\n\n  /******************************* */\n  /** Select start/end date Input fields */\n  /******************************* */\n  const [displayStartDate, setDisplayStartDate] = useState(\"\");\n  const [displayEndDate, setDisplayEndDate] = useState(\"\");\n\n  const startField = () => {\n    document.getElementById(\"CalendarFormStart\").style.visibility = \"visible\";\n  };\n  const endField = () => {\n    document.getElementById(\"CalendarFormEnd\").style.visibility = \"visible\";\n  };\n\n  /******************************* */\n  /**CALENDAR STATES AND FUNCTIONS */\n  /******************************* */\n  const [CalendarStartDate, setCalendarStartDate] = useState(new Date());\n  const [CalendarEndDate, setCalendarEndDate] = useState(new Date());\n\n  const onStartCalendarChange = (nextValue) => setCalendarStartDate(nextValue);\n  const onEndCalendarChange = (nextValue) => setCalendarEndDate(nextValue);\n\n  const selectStartDate = (value) => {\n    setForm({ ...form, start: { ...form.start, date: value } });\n    setCalendarStartDate(value);\n  };\n  const selectEndDate = (value) => {\n    setForm({ ...form, end: { ...form.end, date: value } });\n    setCalendarEndDate(value);\n  };\n\n  // OK button in the calendar view\n  const submitStartDate = (event) => {\n    event.preventDefault();\n    document.getElementById(\"CalendarFormStart\").style.visibility = \"hidden\";\n\n    let formatted = format(CalendarStartDate, \"EEE. MMM. d, y\");\n    setDisplayStartDate(formatted);\n    if (form.end.date < CalendarStartDate) {\n      setForm({ ...form, end: { ...form.end, date: CalendarStartDate } });\n      let formatted = format(CalendarStartDate, \"EEE. MMM. d, y\");\n      setDisplayEndDate(formatted);\n    }\n  };\n  const submitEndDate = (event) => {\n    event.preventDefault();\n    document.getElementById(\"CalendarFormEnd\").style.visibility = \"hidden\";\n    let formatted = format(CalendarEndDate, \"EEE. MMM. d, y\");\n    setDisplayEndDate(formatted);\n    if (form.start.date > CalendarEndDate) {\n      setForm({ ...form, start: { ...form.start, date: CalendarEndDate } });\n      let formatted = format(CalendarEndDate, \"EEE. MMM. d, y\");\n      setDisplayStartDate(formatted);\n    }\n  };\n\n  return (\n    <div>\n      <form>\n        <Top>\n          <Title\n            type=\"text\"\n            placeholder=\"Your event title\"\n            defaultValue={form.title}\n            onChange={(ev) => handleTitle(ev.target.value)}\n          />\n          <Description\n            type=\"text\"\n            placeholder=\"What will happen?\"\n            defaultValue={form.description}\n            onChange={(ev) => handleDescription(ev.target.value)}\n          />\n        </Top>\n        <Section>\n          <Label>Date</Label>\n          <div className=\"dateNTimeInputSection\">\n            <InputBorder>\n              <SectionInput\n                readOnly\n                placeholder=\"Start date\"\n                onClick={() => startField()}\n                value={displayStartDate}\n                defaultValue={displayStartDate}\n              />\n              <FiCalendar color=\"#b3b3b3\" />\n            </InputBorder>\n            <BsArrowRight />\n            <InputBorder>\n              <SectionInput\n                placeholder=\"End date\"\n                onClick={() => endField()}\n                value={displayEndDate}\n                defaultValue={displayEndDate}\n              />\n              <FiCalendar color=\"#b3b3b3\" />\n            </InputBorder>\n          </div>\n          <CalendarForm id=\"CalendarFormStart\">\n            <NewEventCalendar\n              onChange={onStartCalendarChange}\n              value={CalendarStartDate}\n              onClickDay={(value, event) => selectStartDate(value, event)}\n            />\n            <div className=\"ButtonBox\">\n              <button onClick={(event) => submitStartDate(event)}>Ok</button>\n            </div>\n          </CalendarForm>\n          <CalendarForm id=\"CalendarFormEnd\">\n            <NewEventCalendar\n              onChange={onEndCalendarChange}\n              value={CalendarEndDate}\n              onClickDay={(value, event) => selectEndDate(value, event)}\n            />\n            <div className=\"ButtonBox\">\n              <button onClick={(event) => submitEndDate(event)}>Ok</button>\n            </div>\n          </CalendarForm>\n        </Section>\n        <Section>\n          <EditEventTime form={form} setForm={setForm} />\n        </Section>\n        <Section>\n          <Label>Location</Label>\n          <div>\n            <GrLocation />\n            <SectionInput2\n              type=\"text\"\n              placeholder=\"Add location\"\n              onChange={(ev) => handleLocation(ev.target.value)}\n              defaultValue={currentEvent.location}\n            />\n          </div>\n        </Section>\n        <Section>\n          <Label>Notifications</Label>\n          <RiNotification2Line />{\" \"}\n          <SectionInput2 type=\"text\" placeholder=\"Add notification\" />\n        </Section>\n      </form>\n      <ActionsSection>\n        <ButtonClose onClick={closeDialog}>\n          <GrClose />\n        </ButtonClose>\n        <ButtonCreate\n          onClick={(ev) => UpdateEvent(ev)}\n          disabled={buttonDisabled}\n        >\n          {status === \"idle\" ? (\n            \"Update event\"\n          ) : status === \"loading\" ? (\n            <SmallLoadingIcon />\n          ) : (\n            \"Update event\"\n          )}\n        </ButtonCreate>\n      </ActionsSection>\n      {status === \"updated\" ? (\n        <ConfirmationBox>\n          <FcCheckmark /> Your event was updated!\n        </ConfirmationBox>\n      ) : null}\n    </div>\n  );\n};\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  background-color: #f6f7f6;\n  padding-top: 50px;\n  padding-bottom: 30px;\n`;\nconst ActionsSection = styled.div`\n  text-align: center;\n  padding-top: 30px;\n  padding-bottom: 15px;\n  width: 100vw;\n`;\nconst ButtonCreate = styled.button`\n  border: none;\n  background-color: ${COLORS.button2};\n  color: ${COLORS.text1};\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin: 0 10px;\n  width: 160px;\n  height: 40px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  &:disabled {\n    opacity: 0.3;\n  }\n`;\n\nconst ButtonClose = styled.button`\n  border: none;\n  background-color: ${COLORS.button1};\n  color: ${COLORS.text2};\n  font-size: 1.3rem;\n  line-height: 1rem;\n  font-weight: 300;\n  width: 40px;\n  height: 40px;\n  margin: 0 10px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  border-radius: 50px;\n`;\n\nconst Title = styled.input`\n  margin: 10px 0;\n  width: 75vw;\n  border: none;\n  border-bottom: 2px solid black;\n  padding-bottom: 5px;\n  font-size: 1.5rem;\n  font-weight: 500;\n  background-color: transparent;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    opacity: 50%;\n    font-weight: 400;\n  }\n`;\nconst Description = styled.input`\n  margin: 10px 0;\n  width: 75vw;\n  border: none;\n  border-bottom: 1px solid #b3b3b3;\n  padding-bottom: 5px;\n  font-size: 1rem;\n  background-color: transparent;\n\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    opacity: 60%;\n  }\n`;\nconst Section = styled.div`\n  width: 100vw;\n  box-sizing: border-box;\n  border-top: 1px solid #b3b3b3;\n  padding: 15px 20px;\n  .dateNTimeInputSection {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst Label = styled.label`\n  padding-bottom: 10px;\n  display: block;\n  font-size: 1.2rem;\n`;\n\nconst InputBorder = styled.div`\n  border: 1px solid #b3b3b3;\n  border-radius: 3px;\n  display: inline-block;\n  padding: 0 5px;\n  align-items: center;\n  display: flex;\n`;\n\nconst SectionInput = styled.input`\n  padding: 5px 0;\n  font-size: 1rem;\n  width: 140px;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    opacity: 70%;\n  }\n`;\n\nconst SectionInput2 = styled.input`\n  padding: 5px 0;\n  font-size: 1rem;\n  width: 300px;\n  padding-left: 5px;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    opacity: 70%;\n  }\n`;\n\nconst CalendarForm = styled.div`\n  padding: 0 6vw;\n  height: 100vh;\n  box-sizing: border-box;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  .ButtonBox {\n    margin: 10px 0;\n  }\n`;\n\nconst ConfirmationBox = styled.div`\n  margin: 20px;\n  border: 1px solid #00cc63;\n  border-radius: 4px;\n  background-color: #e6fff2;\n  padding: 5px 20px;\n`;\nexport default EditEventForm;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/LoadingIcon.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventTime.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/NewEventCalendar.js",["132"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../Constants\";\nimport Calendar from \"react-calendar\";\n\nconst NewEventCalendar = ({ onChange, value, onClickDay }) => {\n  return (\n    <Wrapper>\n      <Calendar\n        onChange={onChange}\n        defaultView=\"month\"\n        value={value}\n        prev2Label={null}\n        next2Label={null}\n        onClickDay={onClickDay}\n      />\n    </Wrapper>\n  );\n};\n\nexport default NewEventCalendar;\n\nconst Wrapper = styled.div`\n  z-index: 10;\n  .react-calendar {\n    max-width: 100%;\n    background: white;\n    line-height: 2em;\n    text-align: center;\n  }\n  .react-calendar button {\n    border: none;\n    outline: none;\n    font-size: 1.3rem;\n  }\n  .react-calendar__month-view__weekdays__weekday abbr {\n    text-decoration: none;\n  }\n  .react-calendar__month-view__days__day--neighboringMonth {\n    color: #c1c7c3;\n  }\n  .react-calendar__tile--active {\n    background: rgb(97, 191, 191);\n    color: white;\n  }\n`;\n","/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/SmallLoadingIcon.js",[],"/Users/negin.rb/Downloads/pink-planner-master/front-end/src/Components/EditEventTime.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"137","severity":1,"message":"141","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":20},{"ruleId":"137","severity":1,"message":"142","line":7,"column":10,"nodeType":"139","messageId":"140","endLine":7,"endColumn":19},{"ruleId":"137","severity":1,"message":"143","line":7,"column":21,"nodeType":"139","messageId":"140","endLine":7,"endColumn":32},{"ruleId":"137","severity":1,"message":"144","line":8,"column":10,"nodeType":"139","messageId":"140","endLine":8,"endColumn":20},{"ruleId":"137","severity":1,"message":"145","line":8,"column":22,"nodeType":"139","messageId":"140","endLine":8,"endColumn":35},{"ruleId":"137","severity":1,"message":"146","line":9,"column":10,"nodeType":"139","messageId":"140","endLine":9,"endColumn":19},{"ruleId":"137","severity":1,"message":"147","line":9,"column":21,"nodeType":"139","messageId":"140","endLine":9,"endColumn":33},{"ruleId":"137","severity":1,"message":"148","line":7,"column":26,"nodeType":"139","messageId":"140","endLine":7,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":29,"column":6,"nodeType":"151","endLine":29,"endColumn":8,"suggestions":"152"},{"ruleId":"137","severity":1,"message":"153","line":4,"column":18,"nodeType":"139","messageId":"140","endLine":4,"endColumn":27},{"ruleId":"137","severity":1,"message":"154","line":5,"column":10,"nodeType":"139","messageId":"140","endLine":5,"endColumn":20},{"ruleId":"137","severity":1,"message":"155","line":12,"column":10,"nodeType":"139","messageId":"140","endLine":12,"endColumn":16},{"ruleId":"137","severity":1,"message":"156","line":7,"column":7,"nodeType":"139","messageId":"140","endLine":7,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"157","line":1,"column":28,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"137","severity":1,"message":"141","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":20},{"ruleId":"137","severity":1,"message":"158","line":2,"column":22,"nodeType":"139","messageId":"140","endLine":2,"endColumn":31},{"ruleId":"137","severity":1,"message":"159","line":4,"column":10,"nodeType":"139","messageId":"140","endLine":4,"endColumn":16},{"ruleId":"149","severity":1,"message":"160","line":51,"column":6,"nodeType":"151","endLine":51,"endColumn":8,"suggestions":"161"},{"ruleId":"137","severity":1,"message":"159","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":16},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'task_time' is assigned a value but never used.","'setTaskTime' is assigned a value but never used.","'shortBreak' is assigned a value but never used.","'setShortBreak' is assigned a value but never used.","'longBreak' is assigned a value but never used.","'setLongBreak' is assigned a value but never used.","'BiTimer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'today'. Either include it or remove the dependency array.","ArrayExpression",["164"],"'dayColors' is defined but never used.","'GrLocation' is defined but never used.","'status' is assigned a value but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","'useParams' is defined but never used.","'COLORS' is defined but never used.","React Hook useEffect has missing dependencies: 'currentEvent.end.date' and 'currentEvent.start.date'. Either include them or remove the dependency array.",["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: [today]",{"range":"170","text":"171"},"Update the dependencies array to be: [currentEvent.end.date, currentEvent.start.date]",{"range":"172","text":"173"},[955,957],"[today]",[1758,1760],"[currentEvent.end.date, currentEvent.start.date]"]